plugins {
    id 'java'
}

group = 'org.uli.nod'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'

    //Libreria principal para realizar las pruebas
    testImplementation 'org.testng:testng:6.14.3'

    //Cucumber
    implementation 'io.cucumber:cucumber-java:6.9.1'
    implementation 'io.cucumber:cucumber-testng:6.9.1'
    implementation 'io.cucumber:cucumber-core:6.9.1'

    //Posee complementos para manipular la consola de chrome
    implementation 'org.seleniumhq.selenium:selenium-java:4.1.1'
    implementation 'io.appium:java-client:8.5.1'
    //Guava Google - Optimizacion de codigo
    implementation 'com.google.guava:guava:31.0.1-jre'

    //Peticiones Request
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    //Gradle Plugin
    implementation gradleApi()
    //postgresql
    implementation 'org.postgresql:postgresql:42.6.0'

    //Lectura de excel
    implementation 'org.apache.poi:poi:4.1.2'
    implementation 'org.apache.poi:poi-ooxml:4.1.2'
    implementation 'org.apache.poi:poi-ooxml-schemas:4.1.2'
}

test {
    useTestNG()
}

//Configuracion para correr 'task' con Cucumber RunTIme
configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}


/*Se mejora logica de incremento para que cada vez que
Se ejecute jenkins tome la build de jenkins y no la del proyecto
*/
task incrementBuildValue {
    doLast {
        def buildNumber = System.getenv('BUILD_NUMBER')
        if (buildNumber != null) {
            ant.propertyfile(file: "src/test/resources/build.properties") {
                entry(key: "build_version", value: "0" + (buildNumber))
                println "El número de construcción es: $buildNumber"
            }
        } else {
            def propsBuild = file("src/test/resources/build.properties").withReader {
                Properties props = new Properties()
                props.load(it)
                project.ext.myProps = props
            }
            def versissionC = Integer.parseInt(propsBuild.getProperty("build_version"))
            /*Actualizacion de la version de la build*/
            ant.propertyfile(file: "src/test/resources/build.properties") {
                entry(key: "build_version", value: "0" + (versissionC + 1))
            }
            println "El número de construcción es: $versissionC"
        }
    }
}
/**
 * Ejecución por TAG
 */
task regressionLowTag() {
    dependsOn incrementBuildValue
    dependsOn assemble, compileTestJava
    doFirst {
        /*Actualizacion del nombre de la build*/
        def namesTask = name
        ant.propertyfile(file: "src/test/resources/build.properties") {
            entry(key: "name_task", value: namesTask)
        }
    }
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ["--threads", "10", "--plugin", "pretty", "--glue", "app.com", "src/test/java/app/com/usershistory/pocs/POCC.feature"]
        }
    }
}

task regressionMiddleTag() {
    dependsOn incrementBuildValue
    dependsOn assemble, compileTestJava
    doFirst {
        /*Actualizacion del nombre de la build*/
        def namesTask = name
        ant.propertyfile(file: "src/test/resources/build.properties") {
            entry(key: "name_task", value: namesTask)
        }
    }
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ["--threads", "10", "--plugin", "pretty", "--glue", "app.com", "src/test/java/app/com/usershistory/pocs/POCC2.feature"]
        }
    }
}

task regressionHighTag() {
    dependsOn incrementBuildValue
    dependsOn assemble, compileTestJava
    doFirst {
        /*Actualizacion del nombre de la build*/
        def namesTask = name
        /*Actualizacion de la version de la build*/
        ant.propertyfile(file: "src/test/resources/build.properties") {
            entry(key: "name_task", value: namesTask)
        }//Ingreso el nombre de la task en la propiedad name_task del build.properties
    }
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ["--threads", "10", "--plugin", "pretty", "--glue", "app.com", "src/test/java/app/com/usershistory/pocs/POCC3.feature"]
        }
    }
}

task regressionVeryHighTag() {
    dependsOn incrementBuildValue
    dependsOn assemble, compileTestJava
    doFirst {
        /*Actualizacion del nombre de la build*/
        def namesTask = name
        /*Actualizacion de la version de la build*/
        ant.propertyfile(file: "src/test/resources/build.properties") {
            entry(key: "name_task", value: namesTask)
        }//Ingreso el nombre de la task en la propiedad name_task del build.properties
    }
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ["--threads", "10", "--plugin", "pretty", "--glue", "app.com", "src/test/java/app/com/usershistory/pocs/POCC4.feature"]
        }
    }
}